import os
from dotenv import load_dotenv
from autogen import AssistantAgent, UserProxyAgent
from rag_index import retrieve_doc_context  

openai_api_key = os.getenv("OPENAI_API_KEY")
openai_model = os.getenv("OPENAI_MODEL")

llm_config = {
    "config_list": [
        {
            "model": openai_model,
            "api_key": openai_api_key
        }
    ]
}

def is_termination_msg(msg):
    return msg.get("content") and "TERMINATE" in msg["content"]

def run_agent(query):
    doc_assistant = AssistantAgent(
        name="DocAssistant",
        system_message=(
            "You are a helpful document assistant that answers user queries ONLY by calling the 'retrieve_doc_context' tool. "
            "After answering, always respond with 'TERMINATE' to end the chat."
        ),
        llm_config=llm_config,
    )

    user = UserProxyAgent(
        name="User",
        llm_config=False,
        human_input_mode="NEVER",
        is_termination_msg=is_termination_msg,
        code_execution_config={"use_docker": False}
    )

    doc_assistant.register_for_llm(
        name="retrieve_doc_context",
        description="Retrieve relevant context from the indexed documents (PDF, DOCX, PPTX) based on the query."
    )(retrieve_doc_context)

    user.register_for_execution(
        name="retrieve_doc_context"
    )(retrieve_doc_context)

    chat_result = user.initiate_chat(
        doc_assistant,
        message=query,
        summary_method="reflection_with_llm"
    )

    history = getattr(chat_result, "chat_history", None)
    if history is None:
        return "No chat history found.", [], []

    for msg in reversed(history):
        if msg.get("role") == "user" and msg.get("name") == "DocAssistant":
            final_content = msg.get("content", "").replace("TERMINATE", "").strip()
            retrieved_text, sources = retrieve_doc_context(query)
            return final_content, history, sources  

    return "No valid answer was generated by the assistant.", history, []
